package lutfiangg20.demo_teknis.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import jakarta.transaction.Transactional;
import lutfiangg20.demo_teknis.entity.User;
import lutfiangg20.demo_teknis.entity.UserProfile;
import lutfiangg20.demo_teknis.model.RegisterUserRequest;
import lutfiangg20.demo_teknis.model.UpdateUserProfileRequest;
import lutfiangg20.demo_teknis.model.UserResponse;
import lutfiangg20.demo_teknis.model.UserWithProfileResponse;
import lutfiangg20.demo_teknis.repository.UserRepository;

@Service
public class UserService {

  @Autowired
  private UserRepository userRepository;

  @Autowired
  private ValidationService validationService;

  @Autowired
  private PasswordEncoder passwordEncoder;

  @Transactional
  public void register(RegisterUserRequest request) {
    validationService.validate(request);

    if (userRepository.findByEmail(request.getEmail()).isPresent()) {
      throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Email already registered");
    }

    var user = new User();
    user.setEmail(request.getEmail());
    user.setName(request.getName());
    user.setPassword(passwordEncoder.encode(request.getPassword()));

    userRepository.save(user);
  }

  public Page<UserResponse> getAllUsers(Pageable pageable) {
    return userRepository.findAllUserWihtoutPassword(pageable);
  }

  public Page<UserResponse> searchUsers(String keyword, Pageable pageable) {
    return userRepository.searchUserWihtoutPassword(keyword, pageable);
  }

  public UserWithProfileResponse getUserById(int id) {
    var userOptional = userRepository.findUserWithProfile(id);
    System.out.println("get user by id" + userOptional);

    if (userOptional.isEmpty()) {
      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found");
    }

    var user = userOptional.get();

    return new UserWithProfileResponse(
        user.getId(),
        user.getName(),
        user.getEmail(),
        user.getPhoneNumber(),
        user.getDateOfBirth() != null ? user.getDateOfBirth().toString() : "",
        user.getAddress(),
        user.getBio());
  }

  @Transactional
  public String updateUserProfile(int id, UpdateUserProfileRequest request) {
    User user = userRepository.findById(id).orElseThrow(() -> new RuntimeException("User not found"));

    if (request.getName() != null && !request.getName().isBlank()) {
      user.setName(request.getName().trim());
    }

    UserProfile profile = user.getProfile();
    if (profile == null) {
      profile = new UserProfile();
      profile.setUser(user);
    }

    // update field profile hanya kalau ada datanya
    if (request.getPhoneNumber() != null && !request.getPhoneNumber().isBlank()) {
      profile.setPhoneNumber(request.getPhoneNumber().trim());
    }

    if (request.getAddress() != null && !request.getAddress().isBlank()) {
      profile.setAddress(request.getAddress().trim());
    }

    if (request.getBio() != null && !request.getBio().isBlank()) {
      profile.setBio(request.getBio().trim());
    }

    if (request.getDateOfBirth() != null && !request.getDateOfBirth().isBlank()) {
      try {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        profile.setDateOfBirth(LocalDate.parse(request.getDateOfBirth(), formatter));
      } catch (DateTimeParseException e) {
        throw new RuntimeException("Invalid date format, expected yyyy-MM-dd");
      }
    }

    user.setProfile(profile);
    userRepository.save(user);

    return "User profile updated successfully";
  }

  public String deleteUserById(int id) {
    if (userRepository.existsById(id)) {
      userRepository.deleteById(id);
      return "User deleted successfully";
    } else {
      return "user not found";
    }
  }

}
